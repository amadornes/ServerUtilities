buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
}

apply plugin: 'forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'

project.ext {
    major = "0"
    minor = "1"
    mcVersion = "1.7.10"
}


version = "${project.ext.major}.${project.minor}"
group = "com.amadornes.serverutilities"
archivesBaseName = "AmasServerUtilities"


if (System.getenv().BUILD_NUMBER != null) {
    version += "-${System.getenv().BUILD_NUMBER}"
} else {
    version += "-err"
}

def grabDep(url) {
    ant.get(src: url, dest: 'dep');
}

dependencies {
    def f = new File('dep/')
    if (f.exists()) {
        f.delete()
    }
    f.mkdirs()
    if (!f.exists()) {
        f.mkdir()
    }
    println("  Adding dependencies!")
    println("  Finished adding dependencies!");
}

minecraft {
    version = "${project.ext.mcVersion}-10.13.0.1208"
    runDir = "eclipse/assets"

    // replacing stuff in the source
    replace '@VERSION@', "${project.ext.major}.${project.minor}"
    replace '@MC_VERSION@', version
    if (System.getenv("BUILD_NUMBER") != null) {
        replace '@BUILD_NUMBER@', System.getenv("BUILD_NUMBER")
    } else {
        replace '@BUILD_NUMBER@', 0
    }

}

processResources{
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include '*.info'
		
		// replace version and mcversion
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}

	//This makes sure that it gets run EVERY time
	outputs.upToDateWhen {false}
}


jar {
    appendix = "${project.ext.mcVersion}"
    classifier = "universal"
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output) {
        appendix = "${project.ext.mcVersion}"
        classifier = "deobf"
    }
}

task sourceJar(type: Jar) {
    from (sourceSets.main.allSource) {
        appendix = "${project.ext.mcVersion}"
        classifier = "src"
    }
}

artifacts {
    archives sourceJar
    archives deobfJar
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "file:///var/www/maven/")
			pom {
				groupId = "serverutilities"
				version = project.version
				artifactId = project.archivesBaseName
				project {
					name project.archivesBaseName
					packaging 'jar'
					description 'AmasServerUtilities'
					url 'https://github.com/amadornes/ServerUtilities'
					scm {
						url 'https://github.com/amadornes/ServerUtilities'
						connection 'scm:git:git@github.com:amadornes/ServerUtilities.git'
						developerConnection 'scm:git:git@github.com:amadornes/ServerUtilities.git'
					}
					issueManagement {
						system 'github'
						url 'https://github.com/amadornes/ServerUtilities/issues'
					}
					licenses {
						license {
							name 'GPLv3'
							url 'https://github.com/amadornes/ServerUtilities/blob/master/LICENSE'
							distribution 'repo'
						}
					}
					developers {
						developer {
							id 'Amadornes'
							name 'Amadornes'
							roles { role 'developer' }
						}
					}
				}
			}
		}
	}
}